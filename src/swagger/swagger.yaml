openapi: 3.0.0
info:
  version: ''
  title: Jongdeug's Blog API Docs
  description: 블로그 API 명세서입니다.
  license:
    name: Jongdeug
servers:
  - url: 'http://localhost:8000/'
paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: 회원가입
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 회원가입 성공
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 이미 존재하는 이메일 입니다
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/login:
    post:
      tags:
        - Auth
      summary: 로그인
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 로그인 성공
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 비밀번호를 잘못 입력하셨습니다
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 가입되지 않은 이메일 입니다
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/refresh:
    get:
      tags:
        - Auth
      summary: 토큰 리프레쉬
      parameters:
        - in: cookie
          name: refreshToken
          schema:
            type: string
          required: true
          description: HttpOnly 쿠키에 들어있는 refresh token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 인증 갱신 성공
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 토큰을 보내고 있지 않습니다 or 토큰 재발급은 refresh 토큰으로만 가능합니다 or 토큰 유효성 검증에 실패했습니다 or 만료된 토큰입니다 or 잘못된 토큰입니다
        '500':
          $ref: '#/components/responses/InternalServerError'
  /auth/logout:
    get:
      tags:
        - Auth
      summary: 로그아웃
      parameters:
        - in: cookie
          name: accessToken
          schema:
            type: string
          required: true
          description: HttpOnly 쿠키에 들어있는 access token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 로그아웃 완료
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 토큰을 보내고 있지 않습니다 or 로그아웃은 access 토큰으로만 가능합니다 or 잘못된 토큰입니다
        '500':
          $ref: '#/components/responses/InternalServerError'
  /categories:
    post:
      tags:
        - Categories
      summary: 카테고리 생성
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryDto'
      responses:
        '201':
          $ref: '#/components/responses/SuccessCreatedResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenAPIError'
        '409':
          $ref: '#/components/responses/ConflictCategoryError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - Categories
      summary: 카테고리 생성
      responses:
        '200':
          description: 카테고리 리스트
          content:
            application/json:
              schema:
                type: object
                properties:
                  categories:
                    type: array
                    items:
                      type: string
                      example: 운영체제
              examples:
                example1:
                  value:
                    categories:
                      - 운영체제
                      - 알고리즘
                      - CS
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/categories/{name}':
    patch:
      tags:
        - Categories
      summary: 카테고리 수정
      parameters:
        - name: name
          in: path
          required: true
          description: '수정할 카테고리, target'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryDto'
      responses:
        '200':
          $ref: '#/components/responses/SuccessOkResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundCategoryError'
        '409':
          $ref: '#/components/responses/ConflictCategoryError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Categories
      summary: 카테고리 삭제
      parameters:
        - name: name
          in: path
          required: true
          description: '삭제할 카테고리, target'
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/SuccessOkResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 카테고리를 참조하고 있는 Post가 존재합니다
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundCategoryError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /posts:
    post:
      tags:
        - Posts
      summary: 게시글 생성
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreatePostDto'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: 게시글 id
                    example: '12345'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenAPIError'
        '404':
          $ref: '#/components/responses/NotFoundUserError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/posts/{id}':
    patch:
      tags:
        - Posts
      summary: 게시글 수정
      parameters:
        - name: id
          in: path
          required: true
          description: 수정할 게시글 id
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdatePostDto'
      responses:
        '200':
          $ref: '#/components/responses/SuccessOkResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 해당 API 를 사용할 권한이 없습니다 or 게시글에 대한 권한이 없습니다
        '404':
          $ref: '#/components/responses/NotFoundUserAndPostError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Posts
      summary: 게시글 삭제
      parameters:
        - name: id
          in: path
          required: true
          description: 삭제할 게시글 id
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/SuccessOkResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 해당 API 를 사용할 권한이 없습니다 or 게시글에 대한 권한이 없습니다
        '404':
          $ref: '#/components/responses/NotFoundPostError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /posts/like:
    post:
      tags:
        - Posts
      summary: 게시글 좋아요
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostLikeDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  guestLikeId:
                    oneOf:
                      - type: string
                        format: uuid
                        description: '게스트 좋아요 id, 좋아요 생성 성공 시'
                        example: 1234
                      - type: 'null'
                        description: 'null, 좋아요 삭제 성공 시'
                        example: null
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 게시글을 찾을 수 없습니다 or guestLikeId 를 찾을 수 없습니다
        '500':
          $ref: '#/components/responses/InternalServerError'
  /posts/comments:
    post:
      tags:
        - Comments
      summary: 부모 댓글 생성(회원)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentDto'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  newCommentId:
                    type: string
                    format: uuid
                    description: 부모 댓글 id
                    example: '12345'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundUserAndPostError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /posts/comments/guest:
    post:
      tags:
        - Comments
      summary: 부모 댓글 생성(비회원)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentGuestDto'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  newCommentId:
                    type: string
                    format: uuid
                    description: 부모 댓글 id
                    example: '12345'
                  guestCommentId:
                    type: string
                    format: uuid
                    description: 게스트 댓글 id
                    example: '56789'
        '404':
          $ref: '#/components/responses/NotFoundPostError'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    RegisterDto:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          description: 이름
          example: 홍길동
        email:
          type: string
          format: email
          description: 이메일
          example: user@example.com
        password:
          type: string
          description: 비밀번호
          example: password1234!
        description:
          type: string
          description: 간단한 소개
          example: 안녕하세요~ 홍길동입니다.
    LoginDto:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: test1@gmail.com
        password:
          type: string
          example: 1234
    CreateCategoryDto:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: 알고리즘
    UpdateCategoryDto:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: 운영체제
    CreatePostDto:
      type: object
      required:
        - title
        - content
        - category
      properties:
        title:
          type: string
          description: 제목
          example: 생성된 게시글
        content:
          type: string
          description: 내용
          example: 생성했습니다
        category:
          type: string
          description: 카테고리
          example: 운영체제
        tags:
          type: array
          items:
            type: string
          description: 태그
          example:
            - 커널
            - 스케줄링
        images:
          type: array
          items:
            type: string
            format: binary
          description: 이미지 파일
    UpdatePostDto:
      type: object
      required:
        - title
        - content
        - category
      properties:
        title:
          type: string
          description: 제목
          example: 수정된 게시글
        content:
          type: string
          description: 내용
          example: 수정했습니다
        category:
          type: string
          description: 카테고리
          example: 알고리즘
        tags:
          type: array
          items:
            type: string
          description: 태그
          example:
            - 리눅스
            - 시간복잡도
        images:
          type: array
          items:
            type: string
            format: binary
          description: 이미지 파일
    PostLikeDto:
      type: object
      required:
        - postId
        - tryToLike
      properties:
        postId:
          type: string
          format: uuid
          description: 게시글 id
          example: 1234
        tryToLike:
          type: boolean
          description: 좋아요 생성 or 삭제
          example: true
        guestLikeId:
          type: string
          format: uuid
          description: 게시글 좋아요 id
          example: 5678
    CreateCommentDto:
      type: object
      required:
        - postId
        - content
      properties:
        postId:
          type: string
          format: uuid
          description: 게시글 id
          example: 1234
        content:
          type: string
          description: 부모 댓글 내용(회원)
          example: 부모 댓글입니다(회원)
    CreateCommentGuestDto:
      type: object
      required:
        - postId
        - content
        - nickName
        - email
        - password
      properties:
        postId:
          type: string
          format: uuid
          description: 게시글 id
          example: 1234
        content:
          type: string
          description: 부모 댓글 내용(비회원)
          example: 부모 댓글입니다(비회원)
        nickName:
          type: string
          description: 닉네임
          example: 익명123
        email:
          type: string
          description: 이메일
          format: email
          example: guest@example.com
        password:
          type: string
          description: 비밀번호
          example: password123
  responses:
    SuccessCreatedResponse:
      description: Created
      content:
        application/json:
          schema:
            type: object
    SuccessOkResponse:
      description: OK
      content:
        application/json:
          schema:
            type: object
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 잘못된 요청입니다
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 서버에서 에러가 발생했습니다
    ForbiddenAPIError:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 해당 API 를 사용할 권한이 없습니다
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 잘못된 토큰입니다 or 만료된 토큰입니다 or 토큰을 보내고 있지 않습니다 or 서비스 이용은 access 토큰으로만 가능합니다 or 로그인을 진행해주세요
    ConflictCategoryError:
      description: Conflict
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 이미 존재하는 카테고리입니다
    NotFoundCategoryError:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 카테고리를 찾을 수 없습니다
    NotFoundUserError:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 유저를 찾을 수 없습니다
    NotFoundPostError:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 게시글을 찾을 수 없습니다
    NotFoundUserAndPostError:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 유저를 찾을 수 없습니다 or 게시글을 찾을 수 없습니다
