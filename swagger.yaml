openapi: 3.0.0
info:
  version: ''
  title: Blog API Docs
  description: 블로그 API 명세서입니다.
  license:
    name: Jongdeug
servers:
  - url: 'https://jongdeug.port0.org'
paths:
  /api/auth/register:
    post:
      tags:
        - Auth
      summary: 회원가입
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 회원가입 성공
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 이미 존재하는 이메일 입니다
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/auth/login:
    post:
      tags:
        - Auth
      summary: 로그인
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 로그인 성공
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 비밀번호를 잘못 입력하셨습니다
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 가입되지 않은 이메일 입니다
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/auth/refresh:
    get:
      tags:
        - Auth
      summary: 토큰 리프레쉬
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 인증 갱신 성공
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 토큰을 보내고 있지 않습니다 or 토큰 재발급은 refresh 토큰으로만 가능합니다 or 토큰 유효성 검증에 실패했습니다 or 만료된 토큰입니다 or 잘못된 토큰입니다
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/auth/logout:
    get:
      tags:
        - Auth
      summary: 로그아웃
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 로그아웃 완료
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 토큰을 보내고 있지 않습니다 or 로그아웃은 access 토큰으로만 가능합니다 or 잘못된 토큰입니다
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/categories:
    post:
      tags:
        - Categories
      summary: 카테고리 생성
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryDto'
      responses:
        '201':
          $ref: '#/components/responses/SuccessCreatedResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenAPIError'
        '409':
          $ref: '#/components/responses/ConflictCategoryError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      tags:
        - Categories
      summary: 카테고리 조회
      responses:
        '200':
          description: 카테고리 리스트
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: 운영체제
                    count:
                      type: integer
                      example: 3
              examples:
                example1:
                  value:
                    - name: 운영체제
                      count: 3
                    - name: 데이터베이스
                      count: 5
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/api/categories/{name}':
    patch:
      tags:
        - Categories
      summary: 카테고리 수정
      parameters:
        - name: name
          in: path
          required: true
          description: '수정할 카테고리, target'
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryDto'
      responses:
        '200':
          $ref: '#/components/responses/SuccessOkResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundCategoryError'
        '409':
          $ref: '#/components/responses/ConflictCategoryError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Categories
      summary: 카테고리 삭제
      parameters:
        - name: name
          in: path
          required: true
          description: '삭제할 카테고리, target'
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/SuccessOkResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 카테고리를 참조하고 있는 Post가 존재합니다
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundCategoryError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/posts:
    get:
      tags:
        - Posts
      summary: 게시글 목록 조회
      parameters:
        - name: search
          in: query
          description: 검색어
          required: false
          schema:
            type: string
        - name: category
          in: query
          description: 카테고리
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: 페이지
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: 페이지당 게시글 수
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/GetPosts'
                  postCount:
                    type: integer
                    description: 게시글 개수
                    example: 100
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Posts
      summary: 게시글 생성
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreatePostDto'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    description: 게시글 id
                    example: '12345'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenAPIError'
        '404':
          $ref: '#/components/responses/NotFoundUserError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/api/posts/{id}':
    get:
      tags:
        - Posts
      summary: 게시글 상세 조회
      parameters:
        - name: id
          in: path
          required: true
          description: 게시글 id
          schema:
            type: string
        - name: guestLikeId
          in: query
          description: 게시글 좋아요 id(좋아요 누르면 발급되는 것)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  post:
                    $ref: '#/components/schemas/GetPost'
        '404':
          $ref: '#/components/responses/NotFoundPostError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - Posts
      summary: 게시글 수정
      parameters:
        - name: id
          in: path
          required: true
          description: 수정할 게시글 id
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdatePostDto'
      responses:
        '200':
          $ref: '#/components/responses/SuccessOkResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 해당 API 를 사용할 권한이 없습니다 or 게시글에 대한 권한이 없습니다
        '404':
          $ref: '#/components/responses/NotFoundUserAndPostError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Posts
      summary: 게시글 삭제
      parameters:
        - name: id
          in: path
          required: true
          description: 삭제할 게시글 id
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/SuccessOkResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 해당 API 를 사용할 권한이 없습니다 or 게시글에 대한 권한이 없습니다
        '404':
          $ref: '#/components/responses/NotFoundPostError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/posts/like:
    post:
      tags:
        - Posts
      summary: 게시글 좋아요
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostLikeDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  guestLikeId:
                    oneOf:
                      - type: string
                        format: uuid
                        description: '게스트 좋아요 id, 좋아요 생성 성공 시'
                        example: 1234
                      - type: 'null'
                        description: 'null, 좋아요 삭제 성공 시'
                        example: null
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 게시글을 찾을 수 없습니다 or guestLikeId 를 찾을 수 없습니다
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/posts/comments:
    post:
      tags:
        - Comments
      summary: 부모 댓글 생성(회원)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentDto'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  newCommentId:
                    type: string
                    format: uuid
                    description: 부모 댓글 id
                    example: '12345'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundUserAndPostError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/posts/comments/guest:
    post:
      tags:
        - Comments
      summary: 부모 댓글 생성(비회원)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommentGuestDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  newCommentId:
                    type: string
                    format: uuid
                    description: 부모 댓글 id
                    example: 12345
                  guestCommentId:
                    type: string
                    format: uuid
                    description: 게스트 댓글 id
                    example: 56789
        '404':
          $ref: '#/components/responses/NotFoundPostError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/posts/child-comments:
    post:
      tags:
        - Comments
      summary: 자식 댓글 생성(회원)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChildCommentDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  newChildCommentId:
                    type: string
                    format: uuid
                    description: 자식 댓글 id
                    example: 12345
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundUserAndCommentError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/posts/child-comments/guest:
    post:
      tags:
        - Comments
      summary: 자식 댓글 생성(비회원)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChildCommentGuestDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  newChildCommentId:
                    type: string
                    format: uuid
                    description: 자식 댓글 id
                    example: 12345
                  guestCommentId:
                    type: string
                    format: uuid
                    description: 게스트 댓글 id
                    example: 56789
                  postId:
                    type: string
                    format: uuid
                    description: 게시글 id
                    example: 13131
        '404':
          $ref: '#/components/responses/NotFoundCommentError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/api/posts/comments/{id}':
    patch:
      tags:
        - Comments
      summary: 댓글 수정(회원)
      parameters:
        - name: id
          in: path
          required: true
          description: 수정할 댓글 id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentDto'
      responses:
        '200':
          $ref: '#/components/responses/SuccessOkResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenCommentError'
        '404':
          $ref: '#/components/responses/NotFoundUserAndCommentError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Comments
      summary: 댓글 삭제(회원)
      parameters:
        - name: id
          in: path
          required: true
          description: 삭제할 댓글 id
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/SuccessOkResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenCommentError'
        '404':
          $ref: '#/components/responses/NotFoundUserAndCommentError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/api/posts/comments/guest/{id}':
    patch:
      tags:
        - Comments
      summary: 댓글 수정(비회원)
      parameters:
        - name: id
          in: path
          required: true
          description: 수정할 댓글 id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommentGuestDto'
      responses:
        '200':
          $ref: '#/components/responses/SuccessOkResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedPWDError'
        '404':
          $ref: '#/components/responses/NotFoundCommentError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Comments
      summary: 댓글 삭제(비회원)
      parameters:
        - name: id
          in: path
          required: true
          description: 삭제할 댓글 id
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCommentGuestDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  guestCommentId:
                    type: string
                    format: uuid
                    description: 게스트 댓글 id
                    example: 56789
                  postId:
                    type: string
                    format: uuid
                    description: 게시글 id
                    example: 13131
        '401':
          $ref: '#/components/responses/UnauthorizedPWDError'
        '404':
          $ref: '#/components/responses/NotFoundCommentError'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    RegisterDto:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          description: 이름
          example: 홍길동
        email:
          type: string
          format: email
          description: 이메일
          example: user@example.com
        password:
          type: string
          description: 비밀번호
          example: password1234!
        description:
          type: string
          description: 간단한 소개
          example: 안녕하세요~ 홍길동입니다.
    LoginDto:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: test1@gmail.com
        password:
          type: string
          example: 1234
    CreateCategoryDto:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: 알고리즘
    UpdateCategoryDto:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: 운영체제
    CreatePostDto:
      type: object
      required:
        - title
        - content
        - category
      properties:
        title:
          type: string
          description: 제목
          example: 생성된 게시글
        content:
          type: string
          description: 내용
          example: 생성했습니다
        category:
          type: string
          description: 카테고리
          example: 운영체제
        tags:
          type: array
          items:
            type: string
          description: 태그
          example:
            - 커널
            - 스케줄링
        images:
          type: array
          items:
            type: string
            format: binary
          description: 이미지 파일
    UpdatePostDto:
      type: object
      required:
        - title
        - content
        - category
      properties:
        title:
          type: string
          description: 제목
          example: 수정된 게시글
        content:
          type: string
          description: 내용
          example: 수정했습니다
        category:
          type: string
          description: 카테고리
          example: 알고리즘
        tags:
          type: array
          items:
            type: string
          description: 태그
          example:
            - 리눅스
            - 시간복잡도
        images:
          type: array
          items:
            type: string
            format: binary
          description: 이미지 파일
    PostLikeDto:
      type: object
      required:
        - postId
        - tryToLike
      properties:
        postId:
          type: string
          format: uuid
          description: 게시글 id
          example: 1234
        tryToLike:
          type: boolean
          description: 좋아요 생성 or 삭제
          example: true
        guestLikeId:
          type: string
          format: uuid
          description: 게시글 좋아요 id
          example: 5678
    CreateCommentDto:
      type: object
      required:
        - postId
        - content
      properties:
        postId:
          type: string
          format: uuid
          description: 게시글 id
          example: 1234
        content:
          type: string
          description: 부모 댓글 내용(회원)
          example: 부모 댓글입니다(회원)
    CreateCommentGuestDto:
      type: object
      required:
        - postId
        - content
        - nickName
        - email
        - password
      properties:
        postId:
          type: string
          format: uuid
          description: 게시글 id
          example: 1234
        content:
          type: string
          description: 부모 댓글 내용(비회원)
          example: 부모 댓글입니다(비회원)
        nickName:
          type: string
          description: 닉네임
          example: 익명123
        email:
          type: string
          description: 이메일
          format: email
          example: guest@example.com
        password:
          type: string
          description: 비밀번호
          example: password123
    CreateChildCommentDto:
      type: object
      required:
        - parentCommentId
        - content
      properties:
        parentCommentId:
          type: string
          format: uuid
          description: 부모 댓글 id
          example: 1234
        content:
          type: string
          description: 자식 댓글 내용(회원)
          example: 자식 댓글입니다(회원)
    CreateChildCommentGuestDto:
      type: object
      required:
        - parentCommentId
        - content
        - nickName
        - email
        - password
      properties:
        parentCommentId:
          type: string
          format: uuid
          description: 부모 댓글 id
          example: 12345
        content:
          type: string
          description: 자식 댓글 내용(비회원)
          example: 자식 댓글입니다(비회원)
        nickName:
          type: string
          description: 닉네임
          example: 익명123
        email:
          type: string
          format: email
          description: 이메일
          example: guest@example.com
        password:
          type: string
          description: 비밀번호
          example: password1234
    UpdateCommentDto:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          description: 댓글 내용 수정(회원)
          example: 댓글 수정합니다(회원)
    UpdateCommentGuestDto:
      type: object
      required:
        - content
        - password
      properties:
        content:
          type: string
          description: 댓글 내용 수정(비회원)
          example: 댓글 수정합니다(비회원)
        password:
          type: string
          description: 비밀번호
          example: password1234
    DeleteCommentGuestDto:
      type: object
      required:
        - password
      properties:
        password:
          type: string
          description: 비밀번호
          example: password1234
    GetPosts:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: 게시글 id
          example: 14028647-b511-4a24-80fb-d4e25c82d0c1
        title:
          type: string
          description: 제목
          example: 생성된 게시글
        content:
          type: string
          description: 내용
          example: 생성했습니다
        createdAt:
          type: string
          format: date-time
          description: 생성일
          example: '2024-08-05T10:16:45.027Z'
        tags:
          type: array
          items:
            type: string
          description: 태그
          example:
            - 커널
            - 스케줄링
    GetPost:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: 게시글 id
          example: ce9ea4dd-640e-4943-9d45-09aa580189e6
        title:
          type: string
          description: 제목
          example: 조회해보려고
        content:
          type: string
          description: 내용
          example: 내용
        createdAt:
          type: string
          format: date-time
          description: 생성일
          example: 2024-08-06T09:50:49.743Z
        updatedAt:
          type: string
          format: date-time
          description: 수정일
          example: 2024-08-06T09:50:49.743Z
        author:
          type: object
          properties:
            id:
              type: string
              format: uuid
              description: 작성자 id
              example: 53c0c4da-e038-4756-98fc-c60790777cfc
            name:
              type: string
              description: 이름
              example: test1
            email:
              type: string
              description: 이메일
              example: test1@gmail.com
        tags:
          type: array
          items:
            type: string
          description: 태그
          example:
            - 커널
            - 스케줄링
        postLikeCount:
          type: integer
          description: 게시글 좋아요 수
          example: 3
        images:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                description: 이미지 id
                example: 8664f262-fcb5-49e3-be66-497e106cfe7b
              url:
                type: string
                description: url
                example: uploads/17229378497340.8048456280552347-Screenshot from 2024-07-13 19-09-51.png
        comments:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                description: 댓글 id
                example: 18b47aa1-2c8f-4709-8a93-82b201993950
              content:
                type: string
                description: 내용
                example: 부모 댓글입니다(비회원)
              author:
                type: object
                nullable: true
                properties:
                  id:
                    type: string
                    format: uuid
                    description: 작성자 id
                    example: 53c0c4da-e038-4756-98fc-c60790777cfc
                  name:
                    type: string
                    description: 이름
                    example: test1
              guest:
                type: object
                nullable: true
                properties:
                  id:
                    type: string
                    format: uuid
                    description: 비회원 id
                    example: ff15e178-b7d1-40e9-a56c-9389d6569c02
                  nickName:
                    type: string
                    description: 닉네임
                    example: 익명123
              childComments:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                      description: 댓글 id
                      example: 138f5be5-4e3e-4c40-ba6e-40ae8528514a
                    content:
                      type: string
                      description: 내용
                      example: 자식 댓글입니다(비회원)
                    author:
                      type: object
                      nullable: true
                      properties:
                        id:
                          type: string
                          format: uuid
                          description: 작성자 id
                          example: 53c0c4da-e038-4756-98fc-c60790777cfc
                        name:
                          type: string
                          description: 이름
                          example: test1
                    guest:
                      type: object
                      nullable: true
                      properties:
                        id:
                          type: string
                          format: uuid
                          description: 비회원 id
                          example: e5d5e399-2b9d-4fb2-886a-9ea450463fea
                        nickName:
                          type: string
                          description: 닉네임
                          example: 익명123
        isLiked:
          type: boolean
          description: 좋아요 유무
          example: true
  responses:
    SuccessCreatedResponse:
      description: Created
      content:
        application/json:
          schema:
            type: object
    SuccessOkResponse:
      description: OK
      content:
        application/json:
          schema:
            type: object
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 잘못된 요청입니다
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 서버에서 에러가 발생했습니다
    ForbiddenAPIError:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 해당 API 를 사용할 권한이 없습니다
    ForbiddenCommentError:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 댓글에 대한 권한이 없습니다.
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 잘못된 토큰입니다 or 만료된 토큰입니다 or 토큰을 보내고 있지 않습니다 or 서비스 이용은 access 토큰으로만 가능합니다 or 로그인을 진행해주세요
    UnauthorizedPWDError:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 비밀번호를 잘못 입력하셨습니다
    ConflictCategoryError:
      description: Conflict
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 이미 존재하는 카테고리입니다
    NotFoundCategoryError:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 카테고리를 찾을 수 없습니다
    NotFoundUserError:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 유저를 찾을 수 없습니다
    NotFoundPostError:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 게시글을 찾을 수 없습니다
    NotFoundUserAndPostError:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 유저를 찾을 수 없습니다 or 게시글을 찾을 수 없습니다
    NotFoundCommentError:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 댓글을 찾을 수 없습니다
    NotFoundUserAndCommentError:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: 유저를 찾을 수 없습니다 or 댓글을 찾을 수 없습니다
