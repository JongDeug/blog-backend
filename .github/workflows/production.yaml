name: Production CI/CD

# main branch push 시
on:
  push:
    branches:
      - main

jobs:
  # ----------------- 유닛 테스트 ----------------- #
  unit_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout/@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm and dependencies
        run: |
          npm install -g pnpm
          pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm prisma:generate

      - name: Run tests
        run: pnpm test:unit

  # ----------------- 빌드 ----------------- #
  build_and_push:
    environment: prod # github environments: vars.
    runs-on: ubuntu-latest
    needs: unit_test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "SERVER_ORIGIN=${{ vars.SERVER_ORIGIN }}" >> .env
          echo "SERVER_PORT=${{ secrets.SERVER_PORT }}" >> .env
          echo "DB_URL=${{ secrets.DB_URL }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_PWD=${{ secrets.DB_PWD }}" >> .env
          echo "HASH_ROUNDS=${{ secrets.HASH_ROUNDS }}" >> .env
          echo "ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }}" >> .env
          echo "REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}" >> .env
          echo "EMAIL_HOST=${{ secrets.EMAIL_HOST }}" >> .env
          echo "EMAIL_ID=${{ secrets.EMAIL_ID }}" >> .env
          echo "EMAIL_PWD=${{ secrets.EMAIL_PWD }}" >> .env

      # Docker.io
      - name: Set up QEMU, 에뮬레이터
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push docker image to docker.io
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64 # Raspberry Pi
          push: true
          tags: ${{ vars.IMAGE_NAME }}:latest

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build_and_push
  #   environment: prod
  #   steps:
  #     - name: Deploy to Raspberry Pi
  #       uses: appleboy/ssh-action@v1.0.3
  #       with:
  #         host: ${{ secrets.SSH_HOST }}
  #         username: ${{ secrets.SSH_USERNAME }}
  #         port: ${{ secrets.SSH_PORT }}
  #         key: ${{ secrets.SSH_PRIVATE_KEY }}
  #         script: |
  #           # docker-compose 파일 download, 호스트 경로에 uploads 폴더 생성
  #           cd blog-backend
  #           mkdir -p /home/uploads/blog-backend
  #           wget -O docker-compose.yaml https://raw.github.com/JongDeug/blog-backend/main/docker-compose.prod.yaml

  #           # Redis: 설정 파일 생성
  #           > redis.conf

  #           echo "appendonly yes" >> redis.conf
  #           echo "appendfilename \"appendonly.aof\"" >> redis.conf
  #           echo "appendfsync everysec" >> redis.conf

  #           # Docker: docker-compose.yaml에 필요한 .env 파일 생성
  #           > .env

  #           echo "PORT=${{ secrets.PORT }}" >> .env
  #           echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
  #           echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env
  #           echo "DATABASE_PWD=${{ secrets.DATABASE_PWD }}" >> .env
  #           echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
  #           echo "REDIS_PWD=${{ secrets.REDIS_PWD }}" >> .env
  #           echo "REGISTRY_G=${{ vars.REGISTRY_G }}" >> .env
  #           echo "REGISTRY_D=${{ vars.REGISTRY_D }}" >> .env
  #           echo "IMAGE_NAME=${{ vars.IMAGE_NAME }}" >> .env

  #           # docker stop => pull, build, run, 필요없는(태그없는) 이미지 삭제
  #           docker compose down
  #           docker compose pull
  #           docker compose up -d
  #           docker image prune -f
