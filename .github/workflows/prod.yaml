name: Production CI/CD

# main branch 에 push 시
on:
  push:
    branches:
      - main

# 해야할 작업
jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout/@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run tests
        run: yarn test

  build_and_push:
    environment: prod # github environments, vars.
    runs-on: ubuntu-latest
    needs: test

    # github 참고
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "ORIGIN=${{ vars.ORIGIN }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env
          echo "DATABASE_PWD=${{ secrets.DATABASE_PWD }}" >> .env
          echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
          echo "REDIS_PWD=${{ secrets.REDIS_PWD }}" >> .env
          echo "PASSWORD_SALT=${{ secrets.PASSWORD_SALT }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "MAIL_ID=${{ secrets.MAIL_ID }}" >> .env
          echo "MAIL_PWD=${{ secrets.MAIL_PWD }}" >> .env

      #      - name: Log in to Github Container Registry
      #        uses: docker/login-action@v3
      #        with:
      #          registry: ${{ vars.REGISTRY_G }}
      #          username: ${{ github.actor }}
      #          password: ${{ secrets.GITHUB_TOKEN }}
      #
      #      - name: Extract metadata (tags, labels) for Docker
      #        id: meta
      #        uses: docker/metadata-action@v5
      #        with:
      #          images: ${{vars.REGISTRY_G }}/${{ vars.IMAGE_NAME }}
      #
      #      - name: Build and push Docker image to ghcr.io
      #        id: push
      #        uses: docker/build-push-action@v6
      #        with:
      #          context: .
      #          push: true
      #          tags: ${{ steps.meta.outputs.tags }}
      #          labels: ${{ steps.meta.outputs.labels }}

      # Ghcr.io 느리면 Docker.io 사용
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push docker image to docker.io
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64/v8
          push: true
          tags: ${{ vars.IMAGE_NAME }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    environment: prod
    steps:
      - name: Deploy to Raspberry Pi
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # docker-compose 파일 download, 호스트 경로에 uploads 폴더 생성
            cd blog-backend
            mkdir -p /home/uploads/blog-backend
            wget -O docker-compose.yaml https://raw.github.com/JongDeug/blog-backend/main/docker-compose.prod.yaml
            
            # Redis 설정 파일 생성
            > redis.conf
            
            echo "appendonly yes" >> redis.conf
            echo "appendfilename \"appendonly.aof\"" >> redis.conf
            echo "appendfsync everysec" >> redis.conf
            
            # docker-compose.yaml에 필요한 .env 파일 생성
            > .env
            
            echo "PORT=${{ secrets.PORT }}" >> .env
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
            echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env
            echo "DATABASE_PWD=${{ secrets.DATABASE_PWD }}" >> .env
            echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
            echo "REDIS_PWD=${{ secrets.REDIS_PWD }}" >> .env
            echo "REGISTRY_G=${{ vars.REGISTRY_G }}" >> .env
            echo "REGISTRY_D=${{ vars.REGISTRY_D }}" >> .env
            echo "IMAGE_NAME=${{ vars.IMAGE_NAME }}" >> .env
            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env
            
            # docker stop => pull, build, run, 필요없는(태그없는) 이미지 삭제
            docker compose down
            docker compose pull
            docker compose up -d
            docker image prune -f 

