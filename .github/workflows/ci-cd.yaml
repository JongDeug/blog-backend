name: CI/CD Pipeline

# main branch 에 push 시
on:
  push:
    branches:
      - main

# 해야할 작업
jobs:
  test_and_createEnv:
    runs-on: ubuntu-latest
    environment: prod # github environments, 안써도 되는데 그냥 써봄

    steps:
      - name: Checkout code
        uses: actions/checkout/@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run tests
        run: yarn test

      - name: Create .env file
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env
          echo "DATABASE_PWD=${{ secrets.DATABASE_PWD }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "MAIL_ID=${{ secrets.MAIL_ID }}" >> .env
          echo "MAIL_PWD=${{ secrets.MAIL_PWD }}" >> .env
          echo "PASSWORD_SALT=${{ secrets.PASSWORD_SALT }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "REGISTRY=${{ vars.REGISTRY }}" >> .env
          echo "IMAGE_NAME=${{ vars.IMAGE_NAME }}" >> .env

  build_and_push:
    environment: prod
    runs-on: ubuntu-latest
    needs: test_and_createEnv

    # github 참고
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.REGISTRY }}/${{ vars.IMAGE_NAME }}

      - name: Build and push Docker image to ghcr.io
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Deploy to Raspberry Pi
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: whoami
